names(counties[1]
)
#takes about 10 seconds to load all of the GQ data, ~13k records
m <- tibble()
for (i in 1:length(names(counties))) {
a <- map_dfr(
year,
~ get_decennial(
geography = "county",
variables = test$name,
county = counties[[i]],
state = names(counties[i]),
year = .x,
survey = "sf1",
cache_table = TRUE
),
.id = "year"
)
m = rbind(m, a)
}
GQ <- merge(m, test, by.x = "variable", by.y = "name")
#cleanup
GQ$Category[substr(GQ$Category, 1, 5) == "Total"] <- "County Total"
GQ$Category[GQ$Category == "Male"] <- "County Male Total"
GQ$Category[GQ$Category == "Female"] <- "County Female Total"
GQ <- separate(data = GQ, col = NAME, into = c("County", "State"), sep = "\\,")
GQ <- subset(GQ, select = -c(label,GEOID, variable))
#takes about 10 seconds to load all of the GQ data, ~13k records
m <- tibble()
for (i in 1:length(names(counties))) {
a <- map_dfr(
year,
~ get_decennial(
geography = "county",
variables = test$name,
county = counties[[i]],
state = names(counties[i]),
year = .x,
survey = "sf1",
cache_table = TRUE
),
.id = "year"
)
m = rbind(m, a)
}
remove(a)
remove(counties)
rm(list = ls())
#install.packages("tidycensus")
#install.packages("tidyverse")
#ptm <- proc.time()
library(tidycensus)
library(tidyverse)
year <- 2010
states <- c("IL", "IN", "WI")
counties = list(IL=c(31, 43, 89, 93, 97, 111, 197, 7, 37, 63, 91, 99, 103, 141, 201), IN=c(89,91,127), WI=c(59, 101, 127))
#only load data if it isn't already; DOES NOT handle year change
if (tryCatch(is.data.frame(get("df"))) == "FALSE") {
df <- load_variables(year, "sf1")
tibble(df)
}
#returns GQ data for each group as outlined in model
tables <- c("PCO010","PCO009", "PCO008", "PCO006", "PCO005", "PCO004", "PCO003")
var_list <- vector()
for (i in 1:length(tables)){
x <- grep(tables[i], df$name)
var_list <- c(var_list, x)
}
test <- df[var_list,]
#cleanup of category name
test$Category <- gsub(".*)!!","",test$label)
test$Category <- gsub("!!", " ", test$Category)
#takes about 10 seconds to load all of the GQ data, ~13k records
m <- tibble()
for (i in 1:length(names(counties))) {
a <- map_dfr(
year,
~ get_decennial(
geography = "county",
variables = test$name,
county = counties[[i]],
state = names(counties[i]),
year = .x,
survey = "sf1",
cache_table = TRUE
),
.id = "year"
)
m = rbind(m, a)
}
GQ <- merge(m, test, by.x = "variable", by.y = "name")
#cleanup
GQ$Category[substr(GQ$Category, 1, 5) == "Total"] <- "County Total"
GQ$Category[GQ$Category == "Male"] <- "County Male Total"
GQ$Category[GQ$Category == "Female"] <- "County Female Total"
GQ <- separate(data = GQ, col = NAME, into = c("County", "State"), sep = "\\,")
GQ <- subset(GQ, select = -c(label,GEOID, variable))
View(GQ)
GQ[Year] = 2010
GQ <- subset(GQ, select = -c(label,GEOID, variable, year))
GQ$Year = 2010
#cleanup
GQ$Category[substr(GQ$Category, 1, 5) == "Total"] <- "County Total"
GQ$Category[GQ$Category == "Male"] <- "County Male Total"
GQ$Category[GQ$Category == "Female"] <- "County Female Total"
GQ$Year = 2010
GQ <- separate(data = GQ, col = NAME, into = c("County", "State"), sep = "\\,")
GQ <- subset(GQ, select = -c(label,GEOID, variable, year))
pop_tables <- c("P0120")
var_list <- vector()
for (i in 1:length(tables)){
x <- grep(tables[i], df$name)
var_list <- c(var_list, x)
}
test <- df[var_list,]
View(test)
pop_tables <- c("P0120")
var_list <- vector()
for (i in 1:length(pop_tables)){
x <- grep(pop_tables[i], df$name)
var_list <- c(var_list, x)
}
pop_test <- df[var_list,]
View(pop_test)
df_2010 <- load_variables(2000, "sf1")
df_2000 <- load_variables(2000, "sf1")
if (tryCatch(is.data.frame(get("df"))) == "FALSE") {
df_2010 <- load_variables(year, "sf1")
tibble(df_2010)
}
pop_tables <- c("P0120")
var_list <- vector()
for (i in 1:length(pop_tables)){
x <- grep(pop_tables[i], df$name)
var_list <- c(var_list, x)
}
pop_test <- df_2000[var_list,]
df_2000 <- load_variables(2000, "sf1")
if (tryCatch(is.data.frame(get("df_2010")) | is.data.frame(get("df_2000"))) == "FALSE") {
df_2010 <- load_variables(year, "sf1")
tibble(df_2010)
}
remove(df_2000)
if (tryCatch(is.data.frame(get("df_2010")) | is.data.frame(get("df_2000"))) == "FALSE") {
df_2010 <- load_variables(year, "sf1")
tibble(df_2010)
}
if (tryCatch(is.data.frame(get("df_2010")) || is.data.frame(get("df_2000"))) == "FALSE") {
df_2010 <- load_variables(year, "sf1")
tibble(df_2010)
}
remove(df_2010)
if (tryCatch(is.data.frame(get("df_2010")) || is.data.frame(get("df_2000"))) == "FALSE") {
df_2010 <- load_variables(year, "sf1")
tibble(df_2010)
}
if (tryCatch(is.data.frame(get("df_2010"))) == "FALSE") {
df_2010 <- load_variables(year, "sf1")
tibble(df_2010)
}
#only load data if it isn't already; DOES NOT handle year change
if (tryCatch(is.data.frame(get("df_2010"))) == "FALSE") {
df_2010 <- load_variables(year, "sf1")
tibble(df_2010)
}
#only load data if it isn't already; DOES NOT handle year change
if (tryCatch(is.data.frame(get("df_2010"))) == "FALSE") {
df_2010 <- load_variables(year, "sf1")
tibble(df_2010)
}
if (tryCatch(is.data.frame(get("df"))) == "FALSE") {
df_2010 <- load_variables(year, "sf1")
tibble(df_2010)
}
remove(df)
if (tryCatch(is.data.frame(get("df"))) == "FALSE") {
df_2010 <- load_variables(year, "sf1")
tibble(df_2010)
}
is.data.frame(get("df_2000"))
exists('df_2000') && is.data.frame(get('df_2000'))
if (tryCatch((exists('df_2000') && is.data.frame(get('df_2000'))))) == "FALSE") {
df_2010 <- load_variables(year, "sf1")
tibble(df_2010)
}
if (tryCatch((exists('df_2000') && is.data.frame(get('df_2000')))) == "FALSE") {
df_2010 <- load_variables(year, "sf1")
tibble(df_2010)
}
df_2010 <- load_variables(2010, "sf1")
df_2000 <- load_variables(2000, "sf1")
View(df_2000)
View(df_2010)
pop_tables <- c("P0120")
var_list <- vector()
for (i in 1:length(pop_tables)){
x <- grep(pop_tables[i], df$name)
var_list <- c(var_list, x)
}
pop_tables <- c("P0120")
var_list <- vector()
for (i in 1:length(pop_tables)){
x <- grep(pop_tables[i], df_2000$name)
var_list <- c(var_list, x)
}
pop_test <- df_2000[var_list,]
View(pop_test)
pop_tables <- "P0120"
var_list <- vector()
for (i in 1:length(pop_tables)){
x <- grep(pop_tables[i], df_2010$name)
var_list <- c(var_list, x)
}
pop_test <- df_2000[var_list,]
pop_tables <- c("P0120")
var_list <- vector()
for (i in 1:length(pop_tables)){
x <- grep(pop_tables[i], df_2010$name)
var_list <- c(var_list, x)
}
pop_test <- df_2000[var_list,]
pop_test <- df_2010[var_list,]
pop_tables <- c("P0120")
var_list <- vector()
for (i in 1:length(pop_tables)){
x <- grep(pop_tables[i], df_2010$name)
y <- grep(pop_tables[i], df_2000$name)
var_list <- c(var_list, x)
var_list <- c(var_list, y)
}
match(GQ$County, Indiana)
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE)
library(devtools)
library(kableExtra)
source_url("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/GroupQuarters.R")
Indiana <- c("Lake County", "LaPorte County", "Porter County")
filter(GQ, GQ$Category == 'County Total')
filter(GQ, GQ$State == 'Wisconsin')
filter(GQ, GQ$State == 'Wisconsin')
filter(GQ, GQ$State == 'Wisconsin')
GQ
filter(GQ, GQ$State == 'Illinois')
filter(GQ, GQ$State == 'Illinois')
source_url("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/GroupQuarters.R")
filter(GQ, GQ$State == 'Illinois')
View(GQ)
filter(GQ, GQ$State == 'Illinois')
match(GQ$County, Indiana)
match(GQ$County, Wisconsin)
match(GQ$County, Wisconsin)
Wisconsin <- c("Kenosha County", "Racine County", "Walworth County")
match(GQ$County, Wisconsin)
match(Wisconsin, GQ$County)
GQ$Region <- sapply(GQ$Region, function(x) ifelse(match(Wisconsin, GQ$County), "Wisconsin", x))
match(GQ$County, Indiana)
is.element(GQ$County, Wisconsin)
Wisconsin <- c("Kenosha County", "Racine County", "Walworth County")
GQ$Region <- sapply(GQ$Region, function(x) ifelse(is.element(GQ$County, Wisconsin), "NW Indiana", x))
is.element(GQ$County, Wisconsin)
GQ$Region <- sapply(GQ$Region, function(x) ifelse(is.element(GQ$County, Wisconsin), "NW Indiana", x))
Wisconsin
typeof(Wisconsin)
list(Wisconsin)
GQ$Region <- sapply(GQ$Region, function(x) ifelse(is.element(GQ$County, Wisconsin), "NW Indiana", x))
GQ$Region <- sapply(GQ$Region, function(x) ifelse((Wisconsin %in% GQ$County), "NW Indiana", x))
Wisconsin %in% GQ$County
GQ$County %in% Wisconsin
GQ$Region <- sapply(GQ$Region, function(x) ifelse((GQ$County %in% Wisconsin), "NW Indiana", x))
GQ$Region <- sapply(GQ$Region, function(x) ifelse((GQ$County %in% Wisconsin), "NW Indiana", Wisconsin))
GQ$Region <- sapply(GQ$State, function(x) ifelse(GQ$State == "Indiana", "NW Indiana", x))
GQ$Region <- sapply(GQ$State, function(x) ifelse(GQ$State == "Wisconsin", "SE Wisconsin", x))
asdff
GQ$Region <- sapply(GQ$State, function(x) ifelse(GQ$State == "Indiana", "NW Indiana", x))
GQ$Region <- sapply(GQ$State, function(x) ifelse(GQ$State == "Indiana", "NW Indiana", x))
GQ$Region <- sapply(GQ$State, function(x) ifelse(GQ$State == "Wisconsin", "SE Wisconsin", x))
View(GQ)
View(GQ)
GQ$Region <- NA
GQ$Region <- sapply(GQ$State, function(x) ifelse(GQ$State == "Wisconsin", "SE Wisconsin", x))
GQ$Region <- sapply(GQ$State, function(x) ifelse(GQ$State == "Wisconsin", "SE Wisconsin", NA))
GQ$State == "Wisconsin"
GQ$Region <- sapply(GQ$State, function(x) ifelse(GQ$State == 'Wisconsin', "SE Wisconsin", x))
unique(GQ$State)
GQ$Region <- sapply(GQ$State, function(x) ifelse(GQ$State == ' Wisconsin', "SE Wisconsin", ))
GQ$Region <- sapply(GQ$State, function(x) ifelse(GQ$State == ' Wisconsin', "SE Wisconsin", x))
GQ$Region <- sapply(GQ$State, function(x) ifelse(GQ$State == " Indiana", "NW Indiana", x))
GQ$Region <- NA
GQ$Region <- sapply(GQ$State, function(x) ifelse(GQ$State == " Indiana", "NW Indiana", GQ$State))
GQ$Region <- sapply(GQ$State, function(x) ifelse(GQ$State == ' Wisconsin', "SE Wisconsin", GQ$State))
GQ$Region[GQ$State == ' Wisconsin'] <- 'BOO'
GQ$Region[GQ$State == ' Indiana'] <- 'NW Indiana'
GQ$Region <- NA
GQ$Region[GQ$State == ' Wisconsin'] <- 'SE Wisconsin'
GQ$Region[GQ$State == ' Indiana'] <- 'NW Indiana'
match(GQ$County, Indiana)
CMAP %in% GQ$County
CMAP <- c("Cook County", "DuPage County", "Kane County", "Kendall County", "Lake County", "McHenry County", "Will County")
CMAP %in% GQ$County
CMAP %in% GQ$County
match(GQ$County, CMAP)
values[match(GQ$County, CMAP)]
[match(GQ$County, CMAP)]
case_when(
CMAP %in% GQ$County ~ GQ$Region = "CMAP",
case_when(
CMAP %in% GQ$County ~ GQ$Region ="CMAP"
case_when(
CMAP %in% GQ$County ~ "CMAP"
)
GQ$Region <- sapply(GQ$Region, function(x) ifelse(CMAP %in% GQ$County, "CMAP", x))
CMAP %in% GQ$County
GQ$County %in% CMAP
GQ$Region <- sapply(GQ$Region, function(x) ifelse(GQ$County %in% CMAP, "CMAP", x))
GQ$Region <- sapply(GQ$Region, function(x) ifelse((GQ$County %in% CMAP && GQ$State == ' Illinois'), "CMAP", x))
GQ$Region <- NA
CMAP <- c("Cook County", "DuPage County", "Kane County", "Kendall County", "Lake County", "McHenry County", "Will County")
OuterCounty <- c("Boone County", "DeKalb County", "Grundy County", "Kankakee  County", "LaSalle County", "Lee County", "Ogle County", "Winnebago County")
GQ$Region[GQ$State == ' Wisconsin'] <- 'SE Wisconsin'
GQ$Region[GQ$State == ' Indiana'] <- 'NW Indiana'
(GQ$County %in% CMAP && GQ$State == ' Illinois')
match(paste(data$x1, data$x2), paste(index$ind1, index$ind2))
match(GQ$County %in% CMAP && GQ$State == ' Illinois')
match(paste(GQ$County %in% CMAP), paste(GQ$State == ' Illinois'))
match(paste(GQ$County %in% CMAP && GQ$State == ' Illinois'))
GQ$Region <- sapply(GQ$Region, function(x) ifelse((GQ$County %in% CMAP && GQ$State == ' Illinois'), "CMAP", x))
GQ$County %in% CMAP
GQ$Region <- sapply(GQ$Region, function(x) ifelse((GQ$County %in% CMAP && GQ$State == ' Illinois'), "CMAP", x))
GQ$County %in% CMAP && GQ$State == ' Illinois'
GQ[GQ$County %in% CMAP && GQ$State == ' Illinois']
GQ$County %in% CMAP
paste(GQ$County, CMAP)
GQ$Region <- sapply(GQ$Region, function(x) ifelse((GQ$County %in% CMAP & GQ$State == ' Illinois'), "CMAP", x))
GQ$Region <- sapply(GQ$Region, function(x) ifelse((GQ$County %in% OuterCounty & GQ$State == ' Illinois'), "IL Outer County", x))
GQ$Region <- NA
CMAP <- c("Cook County", "DuPage County", "Kane County", "Kendall County", "Lake County", "McHenry County", "Will County")
OuterCounty <- c("Boone County", "DeKalb County", "Grundy County", "Kankakee  County", "LaSalle County", "Lee County", "Ogle County", "Winnebago County")
GQ$Region[GQ$State == ' Wisconsin'] <- 'SE Wisconsin'
GQ$Region[GQ$State == ' Indiana'] <- 'NW Indiana'
GQ$Region <- sapply(GQ$Region, function(x) ifelse((GQ$County %in% CMAP & GQ$State == ' Illinois'), "CMAP", x))
GQ$Region <- sapply(GQ$Region, function(x) ifelse((GQ$County %in% OuterCounty & GQ$State == ' Illinois'), "IL Outer County", x))
GQ$Region <- NA
CMAP <- c("Cook County", "DuPage County", "Kane County", "Kendall County", "Lake County", "McHenry County", "Will County")
OuterCounty <- c("Boone County", "DeKalb County", "Grundy County", "Kankakee  County", "LaSalle County", "Lee County", "Ogle County", "Winnebago County")
GQ$Region[GQ$State == ' Wisconsin'] <- 'SE Wisconsin'
GQ$Region[GQ$State == ' Indiana'] <- 'NW Indiana'
GQ$Region <- sapply(GQ$Region, function(x) if((GQ$County %in% CMAP & GQ$State == ' Illinois'), "CMAP"))
if(GQ$County %in% CMAP & GQ$State == ' Illinois')
if(GQ$County %in% CMAP & GQ$State == ' Illinois') {GQ$Region = "CMAP"}
if(GQ$County %in% CMAP & GQ$State == ' Illinois') {GQ$Region = "CMAP"}
if(GQ$County %in% CMAP && GQ$State == ' Illinois') {GQ$Region = "CMAP"}
if(GQ$County %in% CMAP && GQ$State == ' Illinois') {GQ$Region <- "CMAP"}
if(GQ$County %in% CMAP && GQ$State == ' Illinois')
if(GQ$County %in% CMAP & GQ$State == ' Illinois')
if(GQ$County %in% CMAP & GQ$State == ' Illinois') {GQ$Region <- "CMAP"}
if(GQ$County %in% CMAP & GQ$State == ' Illinois') {GQ$Region <- "CMAP"}
if(GQ$County %in% CMAP & GQ$State == ' Illinois') {GQ$Region = "CMAP"}
unique(GQ$State)
if(GQ$County %in% CMAP & GQ$State == " Illinois") {GQ$Region = "CMAP"}
if(GQ$County %in% CMAP && GQ$State == " Illinois") {GQ$Region = "CMAP"}
GQ$Region[GQ$County %in% CMAP && GQ$State == " Illinois"] <- "CMAP"
GQ$Region[GQ$County %in% CMAP & GQ$State == " Illinois"] <- "CMAP"
GQ$Region[GQ$County %in% OuterCounty & GQ$State == " Illinois"] <- "IL Outer County"
options(warn=-1)
GQ$Region[GQ$State == ' Indiana'] <- 'NW Indiana'
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE)
options(warn=-1)
library(devtools)
library(kableExtra)
source_url("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/GroupQuarters.R")
#source_url("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Population.R")
#source_url()
b <- aggregate(GQ_inst$value, by = list(GQ_inst$concept), sum)
GQ$Region <- NA
CMAP <- c("Cook County", "DuPage County", "Kane County", "Kendall County", "Lake County", "McHenry County", "Will County")
OuterCounty <- c("Boone County", "DeKalb County", "Grundy County", "Kankakee  County", "LaSalle County", "Lee County", "Ogle County", "Winnebago County")
GQ$Region[GQ$State == ' Wisconsin'] <- 'SE Wisconsin'
GQ$Region[GQ$State == ' Indiana'] <- 'NW Indiana'
GQ$Region[GQ$County %in% CMAP & GQ$State == " Illinois"] <- "CMAP"
GQ$Region[GQ$County %in% OuterCounty & GQ$State == " Illinois"] <- "IL Outer County"
View(GQ)
OuterCounty <- c("Boone County", "DeKalb County", "Grundy County", "Kankakee County", "LaSalle County", "Lee County", "Ogle County", "Winnebago County")
GQ$Region[GQ$County %in% OuterCounty & GQ$State == " Illinois"] <- "IL Outer County"
Pop1990 <- source_url("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx")
View(Pop1990)
Pop1990 <- source("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx")
loadWorkbook_url <- function(url) {
temp_file <- tempfile(fileext = ".xlsx")
download.file(url = "https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx", destfile = temp_file, mode = "wb", quiet = TRUE)
loadWorkbook(temp_file)
}
loadWorkbook_url
View(loadWorkbook_url())
View(loadWorkbook_url
)
url
View(url)
View(tempfile())
View(tempfile
)
loadWorkbook_url <- function(url) {
temp_file <- tempfile(fileext = ".xlsx")
download.file(url = url, destfile = temp_file, mode = "wb", quiet = TRUE)
loadWorkbook(temp_file)
}
function("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx")
function(https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx)
loadWorkbook_url()
loadWorkbook_url(https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx)
loadWorkbook_url("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx")
https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx
loadWorkbook_url <- function(url) {
temp_file <- tempfile(fileext = ".xlsx")
download.file(url = url, destfile = temp_file, mode = "wb", quiet = TRUE)
loadWorkbook(temp_file)
}
loadWorkbook_url("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx")
open(loadWorkbook_url("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx"))
open("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx")
read_excel
library(readxl)
read_excel("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx")
install.packages('xlsx')
tmp <- tempfile(fileext = ".xlsx")
httr::GET(url = "url/to/file",
write_disk( tmp) )
xljh <- read_excel(tmp, skip = n)
tf = tempfile(fileext = ".xlsx")
curl::curl_download(url, tf)
readxl::read_excel(tf, ...)
tf = tempfile(fileext = ".xlsx")
curl::curl_download("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx", tf)
readxl::read_excel(tf, ...)
readxl::read_excel(tf)
tf = tempfile(fileext = ".xlsx")
curl_download("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx", tf)
download.file("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx", tf)
readxl::read_excel(tf, ...)
read_excel(tf)
rm(list = ls())
#POPULATION DATA AVAILABLE VIA API FOR 2000 and 2010; excel file for 1990
#look into using get_estimates for 1995, 2005, 2015 populations
library(tidycensus)
library(tidyverse)
library(readxl)
tf = tempfile(fileext = ".xlsx")
download.file("https://github.com/CMAP-REPOS/DemographicForecasting/raw/main/Pop1990.xlsx", tf)
Pop1990 <- read_excel(tf)
df_2000 <- load_variables(2000, "sf1")
df_2010 <- load_variables(2010, "sf1")
year <- 2010
year2 <- 2000
counties = list(IL=c(31, 43, 89, 93, 97, 111, 197, 7, 37, 63, 91, 99, 103, 141, 201), IN=c(89,91,127), WI=c(59, 101, 127))
#2000 HH POP DATA
pop_tables2 <- c("PCT0130")
var_list2 <- vector()
for (i in 1:length(pop_tables2)){
y <- grep(pop_tables2[i], df_2000$name)
var_list2 <- c(var_list2, y)
}
pop_2000 <- df_2000[var_list2,]
pop_2000$Category <- gsub("!!.*?"," ",pop_2000$label)
pop_2000$Category <- sub(".*? ", "", pop_2000$Category)
a <- tibble()
for (i in 1:length(names(counties))) {
b <- map_dfr(
year2,
~ get_decennial(geography = "county", variables = pop_2000$name,county = counties[[i]],state = names(counties[i]),year2 = .x,survey = "sf1", cache_table = TRUE),
.id = "year2")
a = rbind(a, b)
}
pop_2000 <- merge(a, pop_2000, by.x = "variable", by.y = "name")
#2010 HH POP DATA
pop_tables1 <- c("P0120")
var_list1 <- vector()
for (i in 1:length(pop_tables1)){
x <- grep(pop_tables1[i], df_2010$name)
var_list1 <- c(var_list1, x)
}
pop_2010 <- df_2010[var_list1,]
pop_2010$Category <- gsub(".*)!!","",pop_2010$label)
pop_2010$Category <- gsub("!!", " ", pop_2010$Category)
pop_2010$Category <- sub(".*? ", "", pop_2010$Category)
n <- tibble()
for (i in 1:length(names(counties))) {
p <- map_dfr(
year,
~ get_decennial(geography = "county", variables = pop_2010$name,county = counties[[i]],state = names(counties[i]),year = .x,survey = "sf1", cache_table = TRUE),
.id = "year")
n = rbind(n, p)
}
pop_2010 <- merge(n, pop_2010, by.x = "variable", by.y = "name")
#clean up
df <- list(pop_2000, pop_2010)
for (i in 1:length(df)){
df[[i]][["Category"]][substr(df[[i]][["Category"]], 1, 5) == "Total"] <- "County Total"
df[[i]][["Category"]][df[[i]][["Category"]] == "Male"] <- "County Male Total"
df[[i]][["Category"]][df[[i]][["Category"]] == "Female"] <- "County Female Total"
df[[i]] <- separate(data = df[[i]], col = NAME, into = c("County", "State"), sep = "\\,")
df[[i]] <- subset(df[[i]], select = -c(1:3,7:8))
}
pop_2000 <- df[[1]]
pop_2000$Year <- 2000
pop_2010 <- df[[2]]
pop_2010$Year <- 2010
usethis::use_data(GQ, GQ_inst, GQ_noninst)
setwd("~/")
setwd("~/Documents/GitHub/DemographicForecasting")
library(tidyverse)
library(tidycensus)
library(tidycensus)
install.packages("tidycensus")
library(tidycensus)
